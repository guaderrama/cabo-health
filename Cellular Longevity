<!DOCTYPE html>
<html lang="es" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Decodificando la Longevidad – Marco científico interactivo de 7 Pilares</title>
    <meta name="description" content="Explora un protocolo celular basado en evidencia: puntuaciones moleculares, tablas filtrables, protocolos pre-diseñados y dosis de referencia.">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- React & Babel -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        /* Dark Theme (Default) */
        html.dark body {
            background-color: #0f172a; /* slate-900 */
            color: #cbd5e1; /* slate-300 */
        }
        
        /* Light Theme */
        html.light body {
            background-color: #f1f5f9; /* slate-100 */
            color: #334155; /* slate-700 */
        }

        .table-scrollbar::-webkit-scrollbar { height: 8px; }
        .table-scrollbar::-webkit-scrollbar-track { background: var(--scrollbar-track); }
        .table-scrollbar::-webkit-scrollbar-thumb { background: var(--scrollbar-thumb); border-radius: 4px; }
        .table-scrollbar::-webkit-scrollbar-thumb:hover { background: var(--scrollbar-thumb-hover); }

        html.dark {
            --scrollbar-track: #1e293b;
            --scrollbar-thumb: #475569;
            --scrollbar-thumb-hover: #64748b;
        }
        html.light {
            --scrollbar-track: #e2e8f0;
            --scrollbar-thumb: #94a3b8;
            --scrollbar-thumb-hover: #64748b;
        }

        .score-3 { background-color: #10b981; color: white; } /* Emerald-500 */
        .score-2 { background-color: #3b82f6; color: white; } /* Blue-500 */
        .score-1 { background-color: #8b5cf6; color: white; } /* Violet-500 */
        .score-0 { background-color: #64748b; color: white; } /* Slate-500 */
        html.light .score-0 { background-color: #cbd5e1; color: #475569; } /* Slate-300 */
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useMemo, useEffect } = React;

        // --- ICONOS (LUCIDE-REACT SVGs) ---
        const DnaIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4.65 20.35c-1-1-1-2.65 0-3.65l11-11c1-1 2.65-1 3.65 0 1 1 1 2.65 0 3.65l-11 11c-1 1-2.65 1-3.65 0Z"/><path d="m16 7 1-5-5 1"/><path d="m8 17-1 5 5-1"/><path d="m7 16 5.3-5.3"/><path d="m12.7 8.7 5.3-5.3"/></svg>;
        const ZapIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"/></svg>;
        const GitBranchIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="6" x2="6" y1="3" y2="15"/><circle cx="18" cy="6" r="3"/><circle cx="6" cy="18" r="3"/><path d="M18 9a9 9 0 0 1-9 9"/></svg>;
        const RecycleIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.19 9.88"/><path d="M11 19h8.204a1.83 1.83 0 0 0 1.557-.886 1.784 1.784 0 0 0 .004-1.783l-3.95-6.445"/><path d="m13.5 9.5 4-6.5"/><path d="M11 19H7"/><path d="M7 19v-5.17a1.94 1.94 0 0 0-.54-1.38L3 9.5"/><path d="M13.5 9.5H11v9.5h2.5"/><path d="M13.5 9.5 17 3"/></svg>;
        const ShieldIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/></svg>;
        const PackageIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16.5 9.4 7.55 4.24"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><polyline points="3.29 7 12 12 20.71 7"/><line x1="12" x2="12" y1="22" y2="12"/></svg>;
        const Trash2Icon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg>;
        const DownloadIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>;
        const SearchIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" x2="16.65" y1="21" y2="16.65"/></svg>;
        const ChevronUpIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m18 15-6-6-6 6"/></svg>;
        const ChevronDownIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m6 9 6 6 6-6"/></svg>;
        const SunIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="5"/><line x1="12" y1="1" x2="12" y2="3"/><line x1="12" y1="21" x2="12" y2="23"/><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/><line x1="1" y1="12" x2="3" y2="12"/><line x1="21" y1="12" x2="23" y2="12"/><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/></svg>;
        const MoonIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/></svg>;
        const LanguagesIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m5 8 6 6"/><path d="m4 14 6-6 2-3"/><path d="M2 5h12"/><path d="M7 2h1m6 16h4"/><path d="m12.5 13.5 4 4"/><path d="m17 10-4-4"/><path d="m19 5-5 5"/></svg>;

        // --- DATOS Y TRADUCCIONES (i18n) ---
        const i18nData = {
            es: {
                appName: "Longevidad Celular",
                heroTitle: "Decodificando la Longevidad",
                heroSubtitle: "Explora los Siete Pilares del envejecimiento y las intervenciones basadas en evidencia.",
                explorePillars: "Explorar Pilares",
                openMasterTable: "Abrir Tabla Maestra",
                pillars: {
                    title: "Los Siete Pilares del Envejecimiento Celular",
                    subtitle: "Un marco para entender y actuar sobre la biología del envejecimiento.",
                    glossary: "Glosario de Términos Clave",
                    biomarkerGlossaryTitle: "Glosario de Biomarcadores",
                    keyProcessGlossaryTitle: "Glosario de Procesos Clave",
                    data: [
                        { name: "ADN / Información", shortName: "ADN", function: "Protección del código fuente", processes: "Reparación de roturas (PARP, p53); Longitud telomérica", biomarkers: "Acortamiento de telómeros, γ-H2AX↑; Piel foto-envejecida, riesgo oncológico", agents: "Resveratrol/Pterostilbeno; Metformina", lifestyle: "Fotoprotección; Dormir >7 h (reparación nocturna)" },
                        { name: "Mitocondrias / Energía", shortName: "Mitocondrias", function: "Planta de poder", processes: "Fosforilación oxidativa (OXPHOS); Dinámica fusión/fisión", biomarkers: "Caída de VO₂ max, ATP↓, NAD⁺↓, lactato↑", agents: "Ácido Alfa Lipoico (ALA); Nicotinamida (NR/NMN)", lifestyle: "HIIT, contraste frío/sauna; Dieta rica en polifenoles" },
                        { name: "Vías Metabólicas", shortName: "Vías Metabólicas", function: "Gerente de operaciones", processes: "AMPK (sensor de combustible); mTOR, Sirtuinas", biomarkers: "IGF-1↑, insulina de ayuno↑", agents: "Metformina; Berberina (similar a Metformina)", lifestyle: "Ayuno intermitente; restricción calórica moderada" },
                        { name: "Control de Calidad", shortName: "Control de Calidad", function: "Proteostasis/autofagia", processes: "Chaperonas moleculares; Autofagia y mitofagia", biomarkers: "Acumulación de proteínas mal plegadas; Lipofuscina en tejidos", agents: "EGCG (Té Verde); Espermidina", lifestyle: "Ayuno ocasional; ejercicio de resistencia; Sueño profundo" },
                        { name: "Seguridad / Sist. Inmune", shortName: "Sist. Inmune", function: "Defensa e inflamación", processes: "Vigilancia de patógenos; Control de células senescentes", biomarkers: "PCR-hs↑, IL-6↑, \"inflamm-aging\"", agents: "Curcumina; Andrografólido", lifestyle: "Sueño 7–9 h; ejercicio moderado; reducción de estrés" },
                        { name: "Necesidades Celulares", shortName: "Necesidades Cel.", function: "Cadena de suministro", processes: "Micronutrientes (Mg, Vit D); Función de células madre", biomarkers: "Vit D < 30 ng/ml, DHEA↓", agents: "Melatonina; Magnesio", lifestyle: "Dieta rica en micronutrientes; exposición solar controlada" },
                        { name: "Gestión de Desechos", shortName: "Gestión Desechos", function: "Anti-glicación", processes: "Formación/eliminación de AGEs; Trans-glicación", biomarkers: "HbA1c↑, rigidez arterial, piel menos elástica", agents: "Carnosina; Piridoxamina", lifestyle: "Dieta baja en picos glucémicos; cocción a baja temperatura" }
                    ],
                    keys: { processes: "Procesos Clave", biomarkers: "Biomarcadores", agents: "Agentes Moleculares", lifestyle: "Estilo de Vida" }
                },
                 lifestyle: {
                    title: "Estrategias de Estilo de Vida y sus Mecanismos",
                    subtitle: "Comprende cómo tus hábitos impactan la biología del envejecimiento a nivel celular.",
                },
                masterTable: {
                    title: "Tabla Maestra de Agentes Moleculares",
                    subtitle: "Busca, filtra y ordena para explorar el impacto de cada agente.",
                    searchPlaceholder: "Buscar por agente...",
                    export: "Exportar a CSV",
                    noResults: "No se encontraron resultados para"
                },
                protocols: {
                    title: "Protocolos Estratégicos Pre-diseñados",
                    subtitle: "Combinaciones sinérgicas para objetivos específicos.",
                    totalScore: "Puntuación Total",
                    subtotals: "Subtotales por Pilar",
                    export: "Exportar este Protocolo",
                    data: {
                        "The Panacea": { name: "The Panacea", description: "Énfasis en P2 Mitocondrias para la producción de energía y vitalidad celular." },
                        "The Sweet Tooth": { name: "The Sweet Tooth", description: "Maximiza el pilar P7 (Gestión de Residuos) para combatir la glicación.", notes: "La Berberina* puede considerarse alternativa natural a la Metformina." },
                        "The Ache Remedy": { name: "The Ache Remedy", description: "Protocolo anti-inflamatorio con foco en los pilares P5 (Inmune) y P2 (Energía)." }
                    }
                },
                doses: {
                    title: "Dosis Diarias de Referencia",
                    subtitle: "Información de dosificación para referencia educativa.",
                    agent: "Agente",
                    dose: "Dosis Recomendada",
                    notes: "Notas"
                },
                modal: {
                    title: "Descargar Dataset",
                    subtitle: "Introduce tu correo para descargar el archivo CSV y recibir futuras actualizaciones.",
                    placeholder: "tu.correo@ejemplo.com",
                    consent: "Acepto recibir actualizaciones sobre el proyecto.",
                    cancel: "Cancelar",
                    download: "Descargar",
                    alert: "Por favor, introduce un correo válido."
                },
                footer: {
                    copyright: "Construido con fines informativos."
                },
                tabs: ["Inicio", "Pilares", "Estilo de Vida", "Tabla Maestra", "Protocolos", "Dosis"],
            },
            en: {
                appName: "Cellular Longevity",
                heroTitle: "Decoding Longevity",
                heroSubtitle: "Explore the Seven Pillars of aging and evidence-based interventions.",
                explorePillars: "Explore Pillars",
                openMasterTable: "Open Master Table",
                pillars: {
                    title: "The Seven Pillars of Cellular Aging",
                    subtitle: "A framework to understand and act on the biology of aging.",
                    glossary: "Key Terms Glossary",
                    biomarkerGlossaryTitle: "Biomarker Glossary",
                    keyProcessGlossaryTitle: "Key Process Glossary",
                    data: [
                        { name: "DNA / Information", shortName: "DNA", function: "Source code protection", processes: "Break repair (PARP, p53); Telomere length", biomarkers: "Telomere shortening, γ-H2AX↑; Photo-aged skin, oncological risk", agents: "Resveratrol/Pterostilbene; Metformin", lifestyle: "Sun protection; Sleep >7h (nightly repair)" },
                        { name: "Mitochondria / Energy", shortName: "Mitochondria", function: "Power plant", processes: "Oxidative phosphorylation (OXPHOS); Fusion/fission dynamics", biomarkers: "Drop in VO₂ max, ATP↓, NAD⁺↓, lactate↑", agents: "Alpha-Lipoic Acid (ALA); Nicotinamide (NR/NMN)", lifestyle: "HIIT, cold/sauna contrast; Polyphenol-rich diet" },
                        { name: "Metabolic Pathways", shortName: "Metabolic", function: "Operations manager", processes: "AMPK (fuel sensor); mTOR, Sirtuins", biomarkers: "IGF-1↑, fasting insulin↑", agents: "Metformin; Berberine (similar to Metformin)", lifestyle: "Intermittent fasting; moderate caloric restriction" },
                        { name: "Quality Control", shortName: "Quality Control", function: "Proteostasis/autophagy", processes: "Molecular chaperones; Autophagy and mitophagy", biomarkers: "Accumulation of misfolded proteins; Lipofuscin in tissues", agents: "EGCG (Green Tea); Spermidine", lifestyle: "Occasional fasting; resistance exercise; Deep sleep" },
                        { name: "Security / Immune System", shortName: "Immune Syst.", function: "Defense and inflammation", processes: "Pathogen surveillance; Senescent cell control", biomarkers: "hs-CRP↑, IL-6↑, \"inflamm-aging\"", agents: "Curcumin; Andrographolide", lifestyle: "Sleep 7–9h; moderate exercise; stress reduction" },
                        { name: "Cellular Needs", shortName: "Cellular Needs", function: "Supply chain", processes: "Micronutrients (Mg, Vit D); Stem cell function", biomarkers: "Vit D < 30 ng/ml, DHEA↓", agents: "Melatonin; Magnesium", lifestyle: "Micronutrient-rich diet; controlled sun exposure" },
                        { name: "Waste Management", shortName: "Waste Mgmt.", function: "Anti-glycation", processes: "AGEs formation/elimination; Trans-glycation", biomarkers: "HbA1c↑, arterial stiffness, less elastic skin", agents: "Carnosine; Pyridoxamine", lifestyle: "Low glycemic peak diet; low-temperature cooking" }
                    ],
                    keys: { processes: "Key Processes", biomarkers: "Biomarkers", agents: "Molecular Agents", lifestyle: "Lifestyle" }
                },
                 lifestyle: {
                    title: "Lifestyle Strategies and Their Mechanisms",
                    subtitle: "Understand how your habits impact the biology of aging at a cellular level.",
                },
                masterTable: {
                    title: "Master Table of Molecular Agents",
                    subtitle: "Search, filter, and sort to explore the impact of each agent.",
                    searchPlaceholder: "Search by agent...",
                    export: "Export to CSV",
                    noResults: "No results found for"
                },
                protocols: {
                    title: "Pre-designed Strategic Protocols",
                    subtitle: "Synergistic combinations for specific goals.",
                    totalScore: "Total Score",
                    subtotals: "Subtotals by Pillar",
                    export: "Export this Protocol",
                    data: {
                        "The Panacea": { name: "The Panacea", description: "Emphasis on P2 Mitochondria for energy production and cellular vitality." },
                        "The Sweet Tooth": { name: "The Sweet Tooth", description: "Maximizes P7 (Waste Management) to combat glycation.", notes: "Berberine* can be considered a natural alternative to Metformin." },
                        "The Ache Remedy": { name: "The Ache Remedy", description: "Anti-inflammatory protocol focusing on P5 (Immune) and P2 (Energy)." }
                    }
                },
                doses: {
                    title: "Daily Reference Doses",
                    subtitle: "Dosage information for educational reference.",
                    agent: "Agent",
                    dose: "Recommended Dose",
                    notes: "Notes"
                },
                modal: {
                    title: "Download Dataset",
                    subtitle: "Enter your email to download the CSV file and receive future updates.",
                    placeholder: "your.email@example.com",
                    consent: "I agree to receive project updates.",
                    cancel: "Cancel",
                    download: "Download",
                    alert: "Please enter a valid email."
                },
                footer: {
                    copyright: "Built for informational purposes."
                },
                tabs: ["Home", "Pillars", "Lifestyle", "Master Table", "Protocols", "Doses"],
            },
        };
        
        // --- DATOS CENTRALIZADOS (no cambian con el idioma) ---
        const masterTableData = [
            { agente: "Metformina", p1: 3, p2: 1, p3: 3, p4: 2, p5: 2, p6: 2, p7: 3, total: 16 },
            { agente: "Resveratrol/Pterostilbeno", p1: 2, p2: 3, p3: 3, p4: 3, p5: 2, p6: 2, p7: 1, total: 16 },
            { agente: "Curcumina", p1: 2, p2: 3, p3: 1, p4: 0, p5: 3, p6: 0, p7: 3, total: 12 },
            { agente: "Ácido Alfa Lipoico (ALA)", p1: 2, p2: 3, p3: 1, p4: 0, p5: 2, p6: 2, p7: 1, total: 11 },
            { agente: "EGCG", p1: 1, p2: 2, p3: 2, p4: 2, p5: 1, p6: 1, p7: 2, total: 11 },
            { agente: "Melatonina", p1: 2, p2: 2, p3: 1, p4: 2, p5: 2, p6: 2, p7: 0, total: 11 },
            { agente: "Naringenina", p1: 0, p2: 2, p3: 1, p4: 3, p5: 2, p6: 2, p7: 1, total: 11 },
            { agente: "Aloe Vera", p1: 1, p2: 3, p3: 1, p4: 0, p5: 2, p6: 2, p7: 1, total: 10 },
            { agente: "Quercetina", p1: 0, p2: 2, p3: 1, p4: 2, p5: 2, p6: 0, p7: 3, total: 10 },
            { agente: "Sulforafano", p1: 3, p2: 2, p3: 0, p4: 1, p5: 2, p6: 0, p7: 2, total: 10 },
            { agente: "Yerba Mate", p1: 0, p2: 2, p3: 2, p4: 2, p5: 2, p6: 2, p7: 0, total: 10 },
            { agente: "Andrografólido", p1: 1, p2: 2, p3: 0, p4: 1, p5: 3, p6: 1, p7: 1, total: 9 },
            { agente: "Cistanche Deserticola", p1: 1, p2: 2, p3: 0, p4: 1, p5: 3, p6: 2, p7: 0, total: 9 },
            { agente: "Nicotinamida (NR/NMN)", p1: 0, p2: 3, p3: 3, p4: 3, p5: 0, p6: 0, p7: 0, total: 9 },
            { agente: "Ácido Rosmarínico", p1: 0, p2: 3, p3: 0, p4: 1, p5: 2, p6: 0, p7: 3, total: 9 },
            { agente: "Ácido Quebúlico", p1: 0, p2: 2, p3: 0, p4: 0, p5: 2, p6: 1, p7: 3, total: 8 },
            { agente: "Ecklonia Cava", p1: 0, p2: 3, p3: 0, p4: 1, p5: 2, p6: 2, p7: 0, total: 8 },
            { agente: "Ácido Elágico", p1: 1, p2: 2, p3: 2, p4: 0, p5: 2, p6: 0, p7: 1, total: 8 },
            { agente: "Delfinidina", p1: 1, p2: 3, p3: 0, p4: 1, p5: 2, p6: 0, p7: 0, total: 7 },
            { agente: "Polypodium Leucotomas", p1: 2, p2: 2, p3: 0, p4: 1, p5: 2, p6: 0, p7: 0, total: 7 },
            { agente: "Apigenina", p1: 2, p2: 1, p3: 0, p4: 1, p5: 2, p6: 0, p7: 0, total: 6 },
            { agente: "Carnosina", p1: 0, p2: 3, p3: 0, p4: 0, p5: 0, p6: 0, p7: 3, total: 6 },
            { agente: "Astaxantina", p1: 0, p2: 3, p3: 0, p4: 0, p5: 2, p6: 0, p7: 0, total: 5 },
            { agente: "Astrágalo", p1: 2, p2: 0, p3: 0, p4: 0, p5: 2, p6: 0, p7: 0, total: 4 },
            { agente: "Piridoxamina", p1: 0, p2: 0, p3: 0, p4: 0, p5: 0, p6: 0, p7: 3, total: 3 }
        ];

        const protocolsData = {
            "The Panacea": {
                rows: [
                    { agente: "Pterostilbeno", p1: 2, p2: 3, p3: 3, p4: 3, p5: 2, p6: 2, p7: 1 },
                    { agente: "Astaxantina", p1: 0, p2: 3, p3: 0, p4: 0, p5: 2, p6: 0, p7: 0 },
                    { agente: "Nicotinamida", p1: 0, p2: 3, p3: 3, p4: 3, p5: 0, p6: 0, p7: 0 },
                    { agente: "Curcumina", p1: 2, p2: 3, p3: 1, p4: 0, p5: 3, p6: 0, p7: 3 },
                    { agente: "Carnosina", p1: 0, p2: 3, p3: 0, p4: 0, p5: 0, p6: 0, p7: 3 }
                ], subtotals: { p1: 4, p2: 15, p3: 7, p4: 6, p5: 7, p6: 2, p7: 7 }, total: 48
            },
            "The Sweet Tooth": {
                rows: [
                    { agente: "Curcumina", p1: 2, p2: 3, p3: 1, p4: 0, p5: 3, p6: 0, p7: 3 },
                    { agente: "Carnosina", p1: 0, p2: 3, p3: 0, p4: 0, p5: 0, p6: 0, p7: 3 },
                    { agente: "Metformina*", p1: 3, p2: 1, p3: 3, p4: 2, p5: 2, p6: 2, p7: 3 },
                    { agente: "Piridoxamina", p1: 0, p2: 0, p3: 0, p4: 0, p5: 0, p6: 0, p7: 3 },
                    { agente: "Ácido Quebúlico", p1: 0, p2: 2, p3: 0, p4: 0, p5: 2, p6: 1, p7: 3 },
                    { agente: "Ácido Rosmarínico", p1: 0, p2: 3, p3: 0, p4: 1, p5: 2, p6: 0, p7: 3 }
                ], subtotals: { p1: 5, p2: 12, p3: 4, p4: 3, p5: 9, p6: 3, p7: 18 }, total: 54
            },
            "The Ache Remedy": {
                rows: [
                    { agente: "Astaxantina", p1: 0, p2: 3, p3: 0, p4: 0, p5: 2, p6: 0, p7: 0 },
                    { agente: "Curcumina", p1: 2, p2: 3, p3: 1, p4: 0, p5: 3, p6: 0, p7: 3 },
                    { agente: "Delfinidina", p1: 1, p2: 3, p3: 0, p4: 1, p5: 2, p6: 0, p7: 0 },
                    { agente: "Ácido Elágico", p1: 1, p2: 2, p3: 2, p4: 0, p5: 2, p6: 0, p7: 1 },
                    { agente: "Ácido Alfa Lipoico (ALA)", p1: 2, p2: 3, p3: 1, p4: 0, p5: 2, p6: 2, p7: 1 },
                    { agente: "Andrografólido", p1: 1, p2: 2, p3: 0, p4: 1, p5: 3, p6: 1, p7: 1 }
                ], subtotals: { p1: 7, p2: 16, p3: 4, p4: 2, p5: 14, p6: 3, p7: 6 }, total: 52
            }
        };

        const dosesData = [
            { agente: "Ácido Alfa Lipoico (ALA)", dosis: "300–600 mg", notas: "Dosis diabética: 600–1,800 mg" },
            { agente: "Andrografólido", dosis: "400 mg", notas: "—" },
            { agente: "Apigenina", dosis: "50 mg", notas: "—" },
            { agente: "Astaxantina", dosis: "2–12 mg", notas: "Atletas 12 mg; con comida" },
            { agente: "Astrágalo (TA-65)", dosis: "100–250 unidades", notas: "Cicloastragenol 5–25 mg" },
            { agente: "Carnosina", dosis: "500 mg (2×/día)", notas: "Total 1000 mg" },
            { agente: "Ácido Quebúlico", dosis: "200–500 mg", notas: "Hasta 1,000 mg" },
            { agente: "Curcumina", dosis: "Depende de formulación", notas: "Alta biodisponibilidad (BCM95, Meriva)" },
            { agente: "EGCG", dosis: "400–500 mg", notas: "Sin comida (1 taza té verde ≈ 50 mg)" },
            { agente: "Melatonina", dosis: "3–10 mg", notas: "Antes de dormir" },
            { agente: "Metformina", dosis: "500–2,000 mg", notas: "Requiere supervisión médica" },
            { agente: "Nicotinamida Ribósido (NR)", dosis: "250–500 mg", notas: "—" },
            { agente: "Pterostilbeno", dosis: "50–150 mg", notas: "Con comida" },
            { agente: "Piridoxamina", dosis: "50–250 mg", notas: "—" },
            { agente: "Quercetina", dosis: "500 mg", notas: "Hasta 1,200 mg" },
            { agente: "Resveratrol", dosis: "100–250 mg", notas: "Hasta 500–1,000 mg" },
            { agente: "Sulforafano", dosis: "400 mg", notas: "o según formulación" }
        ];

        const pillarIcons = [DnaIcon, ZapIcon, GitBranchIcon, RecycleIcon, ShieldIcon, PackageIcon, Trash2Icon];
        const pillarColors = ["#ec4899", "#f97316", "#8b5cf6", "#14b8a6", "#3b82f6", "#eab308", "#ef4444"];
        
        const glossaryData = {
            es: {
                "Proteostasis": "Equilibrio que mantiene la célula para asegurar que las proteínas estén correctamente plegadas.",
                "Inflamm-aging": "Inflamación crónica de bajo grado que se desarrolla con la edad.",
                "Células senescentes": "Células 'zombie' que han dejado de dividirse y liberan sustancias inflamatorias."
            },
            en: {
                "Proteostasis": "The balance the cell maintains to ensure proteins are correctly folded and functional.",
                "Inflamm-aging": "Chronic low-grade inflammation that develops with age.",
                "Senescent Cells": "'Zombie' cells that have stopped dividing and release inflammatory substances."
            }
        };

        const biomarkerGlossaryData = {
            es: {
                "Acortamiento de telómeros": "Reducción de las tapas protectoras en los extremos de los cromosomas, asociado al envejecimiento celular.",
                "γ-H2AX (aumentado)": "Marcador de daño en el ADN (roturas de doble cadena). Su aumento indica inestabilidad genómica.",
                "Piel foto-envejecida": "Daño cutáneo prematuro (arrugas, manchas) causado por la exposición crónica a la radiación UV.",
                "VO₂ max (reducido)": "Disminución de la capacidad máxima del cuerpo para consumir oxígeno, reflejando una menor eficiencia mitocondrial.",
                "ATP (reducido)": "Bajos niveles de la principal molécula de energía celular, indicando una crisis energética.",
                "NAD⁺ (reducido)": "Niveles disminuidos de una molécula esencial para la producción de energía y reparación del ADN.",
                "Lactato (aumentado)": "Acumulación que puede señalar que las mitocondrias no están procesando energía eficientemente.",
                "IGF-1 (aumentado)": "Niveles crónicamente altos de este factor de crecimiento activan vías que pueden acelerar el envejecimiento.",
                "Insulina de ayuno (aumentada)": "Niveles elevados de insulina en sangre en ayunas, un signo de resistencia a la insulina.",
                "Proteínas mal plegadas": "Acumulación de proteínas defectuosas que la célula no puede limpiar, causando toxicidad.",
                "Lipofuscina": "Pigmento de 'desgaste' que se acumula en las células con la edad, compuesto por proteínas y lípidos oxidados.",
                "PCR-hs (aumentada)": "Proteína C reactiva de alta sensibilidad, un importante marcador de inflamación sistémica en el cuerpo.",
                "IL-6 (aumentada)": "Citoquina pro-inflamatoria. Niveles elevados son un signo clave de 'inflamm-aging'.",
                "Vitamina D (< 30 ng/ml)": "Deficiencia de esta vitamina/hormona, crucial para la función inmune y la salud ósea.",
                "DHEA (reducido)": "Disminución de esta hormona precursora, asociada con el envejecimiento y la pérdida de vitalidad.",
                "HbA1c (aumentada)": "Hemoglobina glicada. Mide el daño por azúcar a largo plazo y el riesgo de complicaciones diabéticas.",
                "Rigidez arterial": "Pérdida de elasticidad en las arterias, a menudo causada por la glicación (AGEs), aumentando el riesgo cardiovascular."
            },
            en: {
                "Telomere Shortening": "Reduction of the protective caps at the ends of chromosomes, associated with cellular aging.",
                "γ-H2AX (increased)": "A marker of DNA damage (double-strand breaks). Its increase indicates genomic instability.",
                "Photo-aged Skin": "Premature skin damage (wrinkles, spots) caused by chronic exposure to UV radiation.",
                "VO₂ max (reduced)": "Decrease in the body's maximum capacity to consume oxygen, reflecting lower mitochondrial efficiency.",
                "ATP (reduced)": "Low levels of the main cellular energy molecule, indicating an energy crisis.",
                "NAD⁺ (reduced)": "Decreased levels of an essential molecule for energy production and DNA repair.",
                "Lactate (increased)": "Accumulation that can signal that mitochondria are not processing energy efficiently.",
                "IGF-1 (increased)": "Chronically high levels of this growth factor activate pathways that can accelerate aging.",
                "Fasting Insulin (increased)": "Elevated levels of insulin in the blood while fasting, a sign of insulin resistance.",
                "Misfolded Proteins": "Accumulation of defective proteins that the cell cannot clear, causing toxicity.",
                "Lipofuscin": "'Wear-and-tear' pigment that accumulates in cells with age, composed of oxidized proteins and lipids.",
                "hs-CRP (increased)": "High-sensitivity C-reactive protein, a major marker of systemic inflammation in the body.",
                "IL-6 (increased)": "Pro-inflammatory cytokine. Elevated levels are a key sign of 'inflamm-aging'.",
                "Vitamin D (< 30 ng/ml)": "Deficiency of this vitamin/hormone, crucial for immune function and bone health.",
                "DHEA (reduced)": "Decrease in this precursor hormone, associated with aging and loss of vitality.",
                "HbA1c (increased)": "Glycated hemoglobin. Measures long-term sugar damage and risk of diabetic complications.",
                "Arterial Stiffness": "Loss of elasticity in the arteries, often caused by glycation (AGEs), increasing cardiovascular risk."
            }
        };

        const keyProcessGlossaryData = {
            es: {
                "Reparación de roturas del ADN (PARP, p53)": "Mecanismos celulares donde proteínas como PARP y p53 detectan y corrigen daños en el ADN para mantener la integridad del genoma.",
                "Fosforilación oxidativa (OXPHOS)": "El principal proceso metabólico en las mitocondrias que utiliza oxígeno para generar grandes cantidades de ATP (energía celular).",
                "Dinámica de Fusión/Fisión Mitocondrial": "Proceso por el cual las mitocondrias se unen (fusión) o se dividen (fisión) para mantener una red saludable y funcional.",
                "AMPK": "Sensor energético celular que se activa cuando los niveles de energía son bajos, promoviendo el catabolismo y la autofagia.",
                "mTOR": "Vía de señalización que promueve el crecimiento celular. Su inhibición está vinculada a una mayor longevidad en varios organismos.",
                "Sirtuinas": "Familia de proteínas que regulan la salud celular, la reparación del ADN y el metabolismo, a menudo llamadas 'genes de la longevidad'.",
                "Chaperonas moleculares": "Proteínas que ayudan a otras proteínas a plegarse correctamente, previniendo la acumulación de agregados tóxicos.",
                "Autofagia y Mitofagia": "Proceso de 'autolimpieza' celular que elimina componentes dañados (autofagia) y mitocondrias disfuncionales (mitofagia).",
                "Vigilancia de patógenos": "Capacidad del sistema inmune para detectar y eliminar microorganismos invasores como virus y bacterias.",
                "Función de células madre": "Capacidad de las células madre para auto-renovarse y diferenciarse para regenerar y reparar tejidos.",
                "Formación y eliminación de AGEs": "Proceso de formación de productos finales de glicación avanzada (AGEs) y la capacidad del cuerpo para eliminarlos.",
                "Trans-glicación": "Mecanismo que puede romper los enlaces cruzados formados por los AGEs, restaurando la función de las proteínas."
            },
            en: {
                "DNA Break Repair (PARP, p53)": "Cellular mechanisms where proteins like PARP and p53 detect and correct DNA damage to maintain genome integrity.",
                "Oxidative Phosphorylation (OXPHOS)": "The main metabolic process in mitochondria that uses oxygen to generate large amounts of ATP (cellular energy).",
                "Mitochondrial Fusion/Fission Dynamics": "Process by which mitochondria merge (fusion) or divide (fission) to maintain a healthy and functional network.",
                "AMPK": "A cellular energy sensor that is activated when energy levels are low, promoting catabolism and autophagy.",
                "mTOR": "A signaling pathway that promotes cell growth. Its inhibition is linked to increased longevity in various organisms.",
                "Sirtuins": "A family of proteins that regulate cellular health, DNA repair, and metabolism, often called 'longevity genes'.",
                "Molecular Chaperones": "Proteins that assist other proteins in folding correctly, preventing the accumulation of toxic aggregates.",
                "Autophagy and Mitophagy": "Cellular 'self-cleaning' process that removes damaged components (autophagy) and dysfunctional mitochondria (mitophagy).",
                "Pathogen Surveillance": "The immune system's ability to detect and eliminate invading microorganisms like viruses and bacteria.",
                "Stem Cell Function": "The ability of stem cells to self-renew and differentiate to regenerate and repair tissues.",
                "AGEs Formation and Clearance": "The process of forming advanced glycation end-products (AGEs) and the body's ability to clear them.",
                "Trans-glycation": "A mechanism that can break the cross-links formed by AGEs, restoring protein function."
            }
        };

        const lifestyleStrategiesData = {
            es: [
                { name: "Fotoprotección", pillarIds: [1], description: "Proteger la piel de la radiación UV previene daños directos al ADN, reduciendo mutaciones y el riesgo de envejecimiento prematuro y cáncer de piel." },
                { name: "Sueño de Calidad (>7h)", pillarIds: [1, 4, 5], description: "Durante el sueño profundo, el cuerpo activa mecanismos intensivos de reparación del ADN y limpieza celular (autofagia), además de regular el sistema inmune." },
                { name: "HIIT (Entrenamiento Interválico de Alta Intensidad)", pillarIds: [2], description: "Estimula la biogénesis mitocondrial (creación de nuevas mitocondrias) y mejora la eficiencia de la producción de energía (ATP)." },
                { name: "Contraste Frío/Sauna (Hormesis)", pillarIds: [2], description: "La exposición a estresores térmicos controlados activa las 'proteínas de choque térmico' y mejora la función mitocondrial, un proceso conocido como hormesis." },
                { name: "Dieta Rica en Polifenoles", pillarIds: [2], description: "Compuestos como los que se encuentran en bayas y té verde actúan como antioxidantes, protegiendo a las mitocondrias del daño oxidativo." },
                { name: "Ayuno Intermitente y Ocasional", pillarIds: [3, 4], description: "Activa vías de longevidad como AMPK e induce la autofagia, promoviendo la limpieza celular y mejorando la sensibilidad a la insulina." },
                { name: "Restricción Calórica Moderada", pillarIds: [3], description: "Imita los efectos del ayuno, reduciendo la actividad de la vía mTOR y activando sirtuinas, lo que se asocia con una mayor longevidad." },
                { name: "Ejercicio de Resistencia", pillarIds: [4], description: "El estrés mecánico en los músculos durante el ejercicio de fuerza estimula la proteostasis y la autofagia para reparar y construir tejido muscular." },
                { name: "Ejercicio Moderado", pillarIds: [5], description: "Reduce la inflamación crónica (inflamm-aging) y mejora la vigilancia del sistema inmunitario contra patógenos y células dañadas." },
                { name: "Reducción de Estrés", pillarIds: [5], description: "El estrés crónico eleva el cortisol, lo que puede suprimir la función inmune y aumentar la inflamación. Técnicas como la meditación lo contrarrestan." },
                { name: "Dieta Rica en Micronutrientes", pillarIds: [6], description: "Asegura que las células tengan las 'materias primas' (vitaminas, minerales como Mg y Vit D) necesarias para todas sus funciones vitales." },
                { name: "Exposición Solar Controlada", pillarIds: [6], description: "Esencial para la síntesis de Vitamina D en la piel, un regulador clave del sistema inmune y la salud celular." },
                { name: "Dieta Baja en Picos Glucémicos", pillarIds: [7], description: "Minimiza la formación de productos finales de glicación avanzada (AGEs), que dañan las proteínas y causan rigidez en los tejidos." },
                { name: "Cocción a Baja Temperatura", pillarIds: [7], description: "Métodos como cocinar al vapor o hervir en lugar de freír o asar a altas temperaturas reducen la ingesta de AGEs preformados en los alimentos." }
            ],
            en: [
                { name: "Sun Protection", pillarIds: [1], description: "Protecting the skin from UV radiation prevents direct DNA damage, reducing mutations and the risk of premature aging and skin cancer." },
                { name: "Quality Sleep (>7h)", pillarIds: [1, 4, 5], description: "During deep sleep, the body activates intensive DNA repair and cellular cleaning (autophagy) mechanisms, as well as regulating the immune system." },
                { name: "HIIT (High-Intensity Interval Training)", pillarIds: [2], description: "Stimulates mitochondrial biogenesis (creation of new mitochondria) and improves the efficiency of energy production (ATP)." },
                { name: "Cold/Sauna Contrast (Hormesis)", pillarIds: [2], description: "Exposure to controlled thermal stressors activates 'heat shock proteins' and improves mitochondrial function, a process known as hormesis." },
                { name: "Polyphenol-Rich Diet", pillarIds: [2], description: "Compounds found in berries and green tea act as antioxidants, protecting mitochondria from oxidative damage." },
                { name: "Intermittent and Occasional Fasting", pillarIds: [3, 4], description: "Activates longevity pathways like AMPK and induces autophagy, promoting cellular cleanup and improving insulin sensitivity." },
                { name: "Moderate Caloric Restriction", pillarIds: [3], description: "Mimics the effects of fasting, reducing mTOR pathway activity and activating sirtuins, which is associated with greater longevity." },
                { name: "Resistance Exercise", pillarIds: [4], description: "Mechanical stress on muscles during strength training stimulates proteostasis and autophagy to repair and build muscle tissue." },
                { name: "Moderate Exercise", pillarIds: [5], description: "Reduces chronic inflammation (inflamm-aging) and improves the immune system's surveillance against pathogens and damaged cells." },
                { name: "Stress Reduction", pillarIds: [5], description: "Chronic stress raises cortisol, which can suppress immune function and increase inflammation. Techniques like meditation counteract this." },
                { name: "Micronutrient-Rich Diet", pillarIds: [6], description: "Ensures that cells have the necessary 'raw materials' (vitamins, minerals like Mg and Vit D) for all their vital functions." },
                { name: "Controlled Sun Exposure", pillarIds: [6], description: "Essential for the synthesis of Vitamin D in the skin, a key regulator of the immune system and cellular health." },
                { name: "Low Glycemic Peak Diet", pillarIds: [7], description: "Minimizes the formation of advanced glycation end-products (AGEs), which damage proteins and cause tissue stiffness." },
                { name: "Low-Temperature Cooking", pillarIds: [7], description: "Methods like steaming or boiling instead of frying or grilling at high temperatures reduce the intake of pre-formed AGEs in food." }
            ]
        };


        // --- COMPONENTES ---

        const Tooltip = ({ text, children }) => {
            return (
                <div className="relative flex items-center justify-center group">
                    {children}
                    <div className="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs p-2 text-sm text-white bg-slate-700 dark:bg-slate-700 rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 pointer-events-none">
                        {text}
                    </div>
                </div>
            );
        };
        
        const ScoreBadge = ({ score }) => {
            const scoreClass = `score-${score}`;
            return (
                <span className={`px-2 py-1 text-xs font-semibold rounded-full ${scoreClass}`}>
                    {score}
                </span>
            );
        };

        const Header = ({ activeTab, setActiveTab, t, lang, setLang, theme, setTheme }) => {
            return (
                <header className="bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm sticky top-0 z-20 border-b border-slate-200 dark:border-slate-800">
                    <nav className="container mx-auto px-4 sm:px-6 lg:px-8 flex justify-between items-center py-3">
                        <div className="flex items-center space-x-3 cursor-pointer" onClick={() => setActiveTab(t.tabs[0])}>
                            <DnaIcon className="text-slate-800 dark:text-white"/>
                            <h1 className="text-xl font-bold text-slate-800 dark:text-white">{t.appName}</h1>
                        </div>
                        <div className="hidden md:flex items-center space-x-2 bg-slate-200 dark:bg-slate-800 p-1 rounded-lg">
                            {t.tabs.map(tab => {
                                if(tab === t.tabs[0]) return null;
                                return (
                                <button
                                    key={tab}
                                    onClick={() => setActiveTab(tab)}
                                    className={`px-4 py-1.5 text-sm font-medium rounded-md transition-colors duration-200 ${
                                        activeTab === tab ? 'bg-sky-500 text-white' : 'text-slate-600 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-700'
                                    }`}
                                >
                                    {tab}
                                </button>
                            )}
                          )}
                        </div>
                        <div className="flex items-center gap-2">
                             <button 
                                onClick={() => setLang(lang === 'es' ? 'en' : 'es')} 
                                className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-300 bg-slate-200/50 dark:bg-slate-800/50 rounded-lg hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors"
                            >
                                <LanguagesIcon />
                                <span>{lang === 'es' ? 'EN' : 'ES'}</span>
                            </button>
                             <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')} className="p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors text-slate-600 dark:text-slate-300">
                                {theme === 'light' ? <MoonIcon/> : <SunIcon/>}
                             </button>
                             <div className="md:hidden">
                                <select 
                                    value={activeTab}
                                    onChange={(e) => setActiveTab(e.target.value)}
                                    className="bg-slate-200 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 text-slate-800 dark:text-white text-sm rounded-lg focus:ring-sky-500 focus:border-sky-500 block w-full p-2.5"
                                >
                                    {t.tabs.map(tab => <option key={tab} value={tab}>{tab}</option>)}
                                </select>
                            </div>
                        </div>
                    </nav>
                </header>
            );
        };
        
        const Hero = ({ t, onExplore, onOpenTable }) => (
            <div className="text-center py-16 sm:py-24">
                 <h1 className="text-4xl sm:text-5xl lg:text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-sky-500 to-violet-600 tracking-tight">
                    {t.heroTitle}
                </h1>
                <p className="mt-4 max-w-2xl mx-auto text-lg text-slate-600 dark:text-slate-400">
                    {t.heroSubtitle}
                </p>
                <div className="mt-8 flex justify-center gap-4">
                    <button onClick={onExplore} className="px-6 py-3 bg-sky-500 text-white font-semibold rounded-lg shadow-md hover:bg-sky-600 transition-colors">
                        {t.explorePillars}
                    </button>
                    <button onClick={onOpenTable} className="px-6 py-3 bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 font-semibold rounded-lg shadow-md hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors">
                        {t.openMasterTable}
                    </button>
                </div>
            </div>
        );

        const PillarsSection = ({ t, lang }) => {
            return (
                <section id="pilares" className="py-16">
                    <div className="text-center mb-12">
                        <h2 className="text-3xl font-bold text-slate-900 dark:text-white">{t.pillars.title}</h2>
                        <p className="mt-2 text-slate-600 dark:text-slate-400">{t.pillars.subtitle}</p>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {t.pillars.data.map((pilar, index) => (
                            <div key={index} className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6 flex flex-col hover:border-sky-500 dark:hover:border-sky-500 transition-colors duration-300">
                                <div className="flex items-center space-x-4 mb-4">
                                    <div className="p-2 rounded-lg" style={{backgroundColor: `${pillarColors[index]}20`, color: pillarColors[index]}}>
                                        {React.createElement(pillarIcons[index])}
                                    </div>
                                    <div>
                                        <h3 className="font-bold text-slate-900 dark:text-white">{index + 1}. {pilar.name}</h3>
                                        <p className="text-sm text-slate-500 dark:text-slate-400">{pilar.function}</p>
                                    </div>
                                </div>
                                <div className="space-y-3 text-sm flex-grow">
                                    <p><strong className="font-semibold text-slate-700 dark:text-slate-300">{t.pillars.keys.processes}:</strong> <span className="text-slate-600 dark:text-slate-400">{pilar.processes}</span></p>
                                    <p><strong className="font-semibold text-slate-700 dark:text-slate-300">{t.pillars.keys.biomarkers}:</strong> <span className="text-slate-600 dark:text-slate-400">{pilar.biomarkers}</span></p>
                                    <p><strong className="font-semibold text-slate-700 dark:text-slate-300">{t.pillars.keys.agents}:</strong> <span className="text-slate-600 dark:text-slate-400">{pilar.agents}</span></p>
                                    <p><strong className="font-semibold text-slate-700 dark:text-slate-300">{t.pillars.keys.lifestyle}:</strong> <span className="text-slate-600 dark:text-slate-400">{pilar.lifestyle}</span></p>
                                </div>
                            </div>
                        ))}
                    </div>

                    <div className="mt-12 space-y-8">
                         <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
                            <h3 className="text-2xl font-bold text-slate-900 dark:text-white mb-4 text-center">{t.pillars.keyProcessGlossaryTitle}</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 gap-y-4 text-left text-sm">
                                {Object.entries(keyProcessGlossaryData[lang]).map(([term, definition]) => (
                                    <div key={term}>
                                        <strong className="font-semibold text-indigo-500">{term}:</strong>
                                        <p className="text-slate-600 dark:text-slate-400">{definition}</p>
                                    </div>
                                ))}
                            </div>
                         </div>
                         <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
                            <h3 className="text-2xl font-bold text-slate-900 dark:text-white mb-4 text-center">{t.pillars.biomarkerGlossaryTitle}</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 gap-y-4 text-left text-sm">
                                {Object.entries(biomarkerGlossaryData[lang]).map(([term, definition]) => (
                                    <div key={term}>
                                        <strong className="font-semibold text-amber-500">{term}:</strong>
                                        <p className="text-slate-600 dark:text-slate-400">{definition}</p>
                                    </div>
                                ))}
                            </div>
                         </div>
                         <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
                            <h3 className="text-2xl font-bold text-slate-900 dark:text-white mb-4 text-center">{t.pillars.glossary}</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 gap-y-4 text-left text-sm">
                                {Object.entries(glossaryData[lang]).map(([term, definition]) => (
                                    <div key={term}>
                                        <strong className="font-semibold text-sky-500">{term}:</strong>
                                        <p className="text-slate-600 dark:text-slate-400">{definition}</p>
                                    </div>
                                ))}
                            </div>
                         </div>
                    </div>
                </section>
            );
        };

        const LifestyleSection = ({ t, lang }) => {
            return (
                <section id="lifestyle" className="py-16">
                    <div className="text-center mb-12">
                        <h2 className="text-3xl font-bold text-slate-900 dark:text-white">{t.lifestyle.title}</h2>
                        <p className="mt-2 text-slate-600 dark:text-slate-400">{t.lifestyle.subtitle}</p>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {lifestyleStrategiesData[lang].map((strategy) => (
                            <div key={strategy.name} className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
                                <h3 className="font-bold text-lg text-slate-900 dark:text-white mb-2">{strategy.name}</h3>
                                <div className="flex flex-wrap gap-2 mb-4">
                                    {strategy.pillarIds.map(id => (
                                        <span key={id} style={{backgroundColor: `${pillarColors[id-1]}30`, color: pillarColors[id-1], borderColor: pillarColors[id-1]}} className="text-xs font-semibold px-2.5 py-0.5 rounded-full border">
                                            Pilar {id}: {t.pillars.data[id-1].shortName}
                                        </span>
                                    ))}
                                </div>
                                <p className="text-sm text-slate-600 dark:text-slate-400">{strategy.description}</p>
                            </div>
                        ))}
                    </div>
                </section>
            );
        };
        
        const MasterTableSection = ({ t, onExport }) => {
            const [searchTerm, setSearchTerm] = useState('');
            const [sortConfig, setSortConfig] = useState({ key: 'total', direction: 'descending' });
            
            const tableHeaders = [
                { key: 'agente', label: t.doses.agent, sortable: true },
                ...t.pillars.data.map((p, i) => ({ key: `p${i+1}`, label: `P${i+1}`, sortable: true })),
                { key: 'total', label: 'Total', sortable: true }
            ];

            const filteredData = useMemo(() => masterTableData.filter(item => item.agente.toLowerCase().includes(searchTerm.toLowerCase())), [searchTerm]);

            const sortedData = useMemo(() => {
                let sortableItems = [...filteredData];
                if (sortConfig.key) {
                    sortableItems.sort((a, b) => {
                        if (a[sortConfig.key] < b[sortConfig.key]) return sortConfig.direction === 'ascending' ? -1 : 1;
                        if (a[sortConfig.key] > b[sortConfig.key]) return sortConfig.direction === 'ascending' ? 1 : -1;
                        return 0;
                    });
                }
                return sortableItems;
            }, [filteredData, sortConfig]);

            const handleSort = (key) => {
                let direction = 'ascending';
                if (sortConfig.key === key && sortConfig.direction === 'ascending') {
                    direction = 'descending';
                }
                setSortConfig({ key, direction });
            };
            
            const renderRow = (row) => (
                <tr key={row.agente} className="bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-800 hover:bg-slate-50 dark:hover:bg-slate-800">
                    <th scope="row" className="px-6 py-4 font-medium text-slate-900 dark:text-white whitespace-nowrap">{row.agente}</th>
                    {Array.from({ length: 7 }, (_, i) => i + 1).map(pilarId => (
                        <td key={pilarId} className="px-6 py-4 text-center">
                            <Tooltip text={t.pillars.data[pilarId - 1].name}>
                                 <ScoreBadge score={row[`p${pilarId}`]} />
                            </Tooltip>
                        </td>
                    ))}
                    <td className="px-6 py-4 font-bold text-slate-900 dark:text-white text-center">{row.total}</td>
                </tr>
            );
            
            const renderSortIcon = (key) => {
                if (sortConfig.key !== key) {
                    return <div className="h-4 w-4 opacity-30 group-hover:opacity-100"><ChevronUpIcon/></div>;
                }
                return sortConfig.direction === 'ascending' ? <ChevronUpIcon/> : <ChevronDownIcon/>;
            };

            return (
                <section id="tabla-maestra" className="py-16">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-slate-900 dark:text-white">{t.masterTable.title}</h2>
                        <p className="mt-2 text-slate-600 dark:text-slate-400">{t.masterTable.subtitle}</p>
                    </div>
                    <div className="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
                        <div className="relative w-full md:w-1/3">
                            <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-slate-500 dark:text-slate-400">
                                <SearchIcon />
                            </div>
                            <input
                                type="text"
                                placeholder={t.masterTable.searchPlaceholder}
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-700 text-slate-900 dark:text-white placeholder-slate-400 dark:placeholder-slate-500 text-sm rounded-lg focus:ring-sky-500 focus:border-sky-500 block w-full pl-10 p-2.5"
                            />
                        </div>
                        <button 
                            onClick={() => onExport(sortedData)}
                            className="w-full md:w-auto flex items-center justify-center gap-2 px-5 py-2.5 bg-emerald-600 text-white font-semibold rounded-lg shadow-md hover:bg-emerald-700 transition-colors"
                        >
                            <DownloadIcon />
                            {t.masterTable.export}
                        </button>
                    </div>
                     <div className="bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-800 overflow-hidden">
                        <div className="overflow-x-auto table-scrollbar">
                            <table className="w-full min-w-[1200px] text-sm text-left text-slate-500 dark:text-slate-400">
                                <thead className="text-xs text-slate-700 dark:text-slate-300 uppercase bg-slate-100 dark:bg-slate-800">
                                    <tr>
                                        <th scope="col" rowSpan="2" className="px-6 py-3 align-bottom border-b border-r border-slate-200 dark:border-slate-700">
                                            <div className="flex items-center cursor-pointer group" onClick={() => handleSort('agente')}>
                                                {t.doses.agent}
                                                <span className="ml-1.5">{renderSortIcon('agente')}</span>
                                            </div>
                                        </th>
                                        {t.pillars.data.map((p, i) => (
                                            <th key={i} scope="col" className="px-2 py-2 text-center font-normal normal-case tracking-tighter text-[10px] whitespace-nowrap border-b border-slate-200 dark:border-slate-700">
                                                {p.name}
                                            </th>
                                        ))}
                                        <th scope="col" rowSpan="2" className="px-6 py-3 align-bottom border-b border-l border-slate-200 dark:border-slate-700">
                                             <div className="flex items-center cursor-pointer group" onClick={() => handleSort('total')}>
                                                Total
                                                <span className="ml-1.5">{renderSortIcon('total')}</span>
                                            </div>
                                        </th>
                                    </tr>
                                    <tr>
                                        {tableHeaders.filter(h => h.key.startsWith('p')).map(header => (
                                             <th key={header.key} scope="col" className="px-6 py-3 text-center border-r border-slate-200 dark:border-slate-700 last:border-r-0">
                                               <div className="flex items-center justify-center cursor-pointer group" onClick={() => handleSort(header.key)}>
                                                    {header.label}
                                                    <span className="ml-1.5">{renderSortIcon(header.key)}</span>
                                                </div>
                                             </th>
                                        ))}
                                    </tr>
                                </thead>
                                <tbody>
                                    {sortedData.map(renderRow)}
                                </tbody>
                            </table>
                        </div>
                        {sortedData.length === 0 && <p className="p-8 text-center text-slate-500 dark:text-slate-400">{t.masterTable.noResults} "{searchTerm}".</p>}
                    </div>
                </section>
            );
        };
        
        const ProtocolsSection = ({ t, onExport }) => {
            const [activeProtocol, setActiveProtocol] = useState('The Panacea');
            const protocol = protocolsData[activeProtocol];
            const protocolInfo = t.protocols.data[activeProtocol];

            const tableHeaders = [
                { key: 'agente', label: t.doses.agent },
                ...t.pillars.data.map((p, i) => ({ key: `p${i+1}`, label: `P${i+1}`}))
            ];
            
            const renderRow = (row) => (
                <tr key={row.agente} className="bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-800 hover:bg-slate-50 dark:hover:bg-slate-800">
                    <th scope="row" className="px-6 py-4 font-medium text-slate-900 dark:text-white whitespace-nowrap">{row.agente}</th>
                    {Array.from({ length: 7 }, (_, i) => i + 1).map(pilarId => (
                        <td key={pilarId} className="px-6 py-4 text-center">
                            <ScoreBadge score={row[`p${pilarId}`]} />
                        </td>
                    ))}
                </tr>
            );

            return (
                 <section id="protocolos" className="py-16">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-slate-900 dark:text-white">{t.protocols.title}</h2>
                        <p className="mt-2 text-slate-600 dark:text-slate-400">{t.protocols.subtitle}</p>
                    </div>

                    <div className="flex justify-center mb-8">
                        <div className="flex space-x-2 bg-slate-200 dark:bg-slate-800 p-1 rounded-lg">
                            {Object.keys(protocolsData).map(key => (
                                <button
                                    key={key}
                                    onClick={() => setActiveProtocol(key)}
                                    className={`px-4 py-1.5 text-sm font-medium rounded-md transition-colors duration-200 ${
                                        activeProtocol === key ? 'bg-sky-500 text-white' : 'text-slate-600 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-700'
                                    }`}
                                >
                                    {t.protocols.data[key].name}
                                </button>
                            ))}
                        </div>
                    </div>

                    <div className="bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-800 rounded-lg p-6">
                        <div className="flex flex-col md:flex-row justify-between md:items-center mb-4">
                            <div>
                                <h3 className="text-2xl font-bold text-slate-900 dark:text-white">{protocolInfo.name}</h3>
                                <p className="text-slate-600 dark:text-slate-400">{protocolInfo.description}</p>
                            </div>
                            <div className="mt-4 md:mt-0 flex flex-col items-start md:items-end">
                                <span className="text-sm text-slate-500 dark:text-slate-400">{t.protocols.totalScore}</span>
                                <p className="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-sky-500 to-violet-600">{protocol.total}</p>
                            </div>
                        </div>

                        <div className="rounded-lg border border-slate-200 dark:border-slate-700 overflow-hidden">
                             <div className="overflow-x-auto table-scrollbar">
                                <table className="w-full min-w-[800px] text-sm text-left text-slate-500 dark:text-slate-400">
                                    <thead className="text-xs text-slate-700 dark:text-slate-300 uppercase bg-slate-100 dark:bg-slate-800">
                                        <tr>
                                            <th scope="col" className="px-6 py-3">
                                               {t.doses.agent}
                                            </th>
                                            {tableHeaders.filter(h => h.key.startsWith('p')).map(header => (
                                                 <th key={header.key} scope="col" className="px-6 py-3 text-center">
                                                   {header.label}
                                                 </th>
                                            ))}
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {protocol.rows.map(renderRow)}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <div className="mt-4">
                             <div className="p-4 bg-slate-100 dark:bg-slate-800 rounded-lg">
                                <h4 className="text-lg font-semibold text-slate-900 dark:text-white mb-2">{t.protocols.subtotals}</h4>
                                 <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-7 gap-2">
                                    {Object.entries(protocol.subtotals).map(([key, value]) => {
                                        const pilarId = parseInt(key.replace('p', ''));
                                        return (
                                            <div key={key} className="text-center p-2 bg-white dark:bg-slate-700 rounded-lg">
                                                <p className="text-xs font-semibold text-sky-500">{t.pillars.data[pilarId-1].name}</p>
                                                <p className="text-xl font-bold text-slate-900 dark:text-white">{value}</p>
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>
                            {protocolInfo.notes && <p className="text-xs text-slate-500 mt-4 italic">* {protocolInfo.notes}</p>}
                        </div>
                         <button 
                            onClick={() => onExport(protocol.rows, `${protocolInfo.name}_protocol`)}
                            className="mt-6 w-full md:w-auto flex items-center justify-center gap-2 px-5 py-2.5 bg-emerald-600 text-white font-semibold rounded-lg shadow-md hover:bg-emerald-700 transition-colors"
                        >
                            <DownloadIcon />
                            {t.protocols.export}
                        </button>
                    </div>
                </section>
            );
        };
        
        const DosesSection = ({t}) => {
             const tableHeaders = [
                { key: 'agente', label: t.doses.agent, sortable: false },
                { key: 'dosis', label: t.doses.dose, sortable: false },
                { key: 'notas', label: t.doses.notes, sortable: false }
            ];
             const renderRow = (row) => (
                <tr key={row.agente} className="bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-800 hover:bg-slate-50 dark:hover:bg-slate-800">
                    <th scope="row" className="px-6 py-4 font-medium text-slate-900 dark:text-white whitespace-nowrap">{row.agente}</th>
                    <td className="px-6 py-4">{row.dosis}</td>
                    <td className="px-6 py-4 text-slate-500 dark:text-slate-400">{row.notas}</td>
                </tr>
            );

            return (
                <section id="dosis" className="py-16">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-slate-900 dark:text-white">{t.doses.title}</h2>
                        <p className="mt-2 text-slate-600 dark:text-slate-400">{t.doses.subtitle}</p>
                    </div>
                    <div className="bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-800 overflow-hidden">
                       <div className="overflow-x-auto table-scrollbar">
                            <table className="w-full min-w-[800px] text-sm text-left text-slate-500 dark:text-slate-400">
                                <thead className="text-xs text-slate-700 dark:text-slate-300 uppercase bg-slate-100 dark:bg-slate-800">
                                    <tr>
                                        {tableHeaders.map(header => (
                                            <th key={header.key} scope="col" className="px-6 py-3">
                                                {header.label}
                                            </th>
                                        ))}
                                    </tr>
                                </thead>
                                <tbody>
                                    {dosesData.map(renderRow)}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
            );
        };
        
        const Footer = ({t}) => (
            <footer className="border-t border-slate-200 dark:border-slate-800 mt-16">
                <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8 text-center text-slate-600 dark:text-slate-500 text-sm">
                    <p>{t.footer.copyright} &copy; {new Date().getFullYear()} {t.heroTitle}.</p>
                </div>
            </footer>
        );

        const EmailGateModal = ({ isOpen, onClose, onConfirm, t }) => {
            if (!isOpen) return null;
            const [email, setEmail] = useState('');

            const handleSubmit = (e) => {
                e.preventDefault();
                if (email && email.includes('@')) {
                    onConfirm(email);
                } else {
                    alert(t.modal.alert);
                }
            };

            return (
                <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4">
                    <div className="bg-white dark:bg-slate-800 rounded-lg shadow-xl p-8 max-w-md w-full">
                        <h2 className="text-2xl font-bold text-slate-900 dark:text-white mb-2">{t.modal.title}</h2>
                        <p className="text-slate-600 dark:text-slate-400 mb-6">{t.modal.subtitle}</p>
                        <form onSubmit={handleSubmit}>
                            <input
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                placeholder={t.modal.placeholder}
                                className="w-full bg-slate-100 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 text-slate-900 dark:text-white rounded-lg p-3 mb-4 focus:ring-sky-500 focus:border-sky-500"
                                required
                            />
                             <label className="flex items-center space-x-2 text-sm text-slate-600 dark:text-slate-400 mb-6">
                                <input type="checkbox" required className="rounded bg-slate-200 dark:bg-slate-700 border-slate-400 dark:border-slate-600 text-sky-500 focus:ring-sky-500"/>
                                <span>{t.modal.consent}</span>
                            </label>
                            <div className="flex justify-end gap-4">
                                <button type="button" onClick={onClose} className="px-5 py-2.5 bg-slate-200 dark:bg-slate-700 text-slate-800 dark:text-slate-300 font-semibold rounded-lg hover:bg-slate-300 dark:hover:bg-slate-600 transition-colors">
                                    {t.modal.cancel}
                                </button>
                                <button type="submit" className="px-5 py-2.5 bg-sky-500 text-white font-semibold rounded-lg hover:bg-sky-600 transition-colors">
                                    {t.modal.download}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            );
        };


        // --- COMPONENTE PRINCIPAL ---
        const App = () => {
            const [activeTab, setActiveTab] = useState('Inicio');
            const [isModalOpen, setIsModalOpen] = useState(false);
            const [dataToExport, setDataToExport] = useState(null);
            const [exportFilename, setExportFilename] = useState('longevity_data');
            const [lang, setLang] = useState('es');
            const [theme, setTheme] = useState('dark');

            const t = i18nData[lang];

            useEffect(() => {
                document.documentElement.lang = lang;
            }, [lang]);

            useEffect(() => {
                const root = document.documentElement;
                if (theme === 'light') {
                    root.classList.remove('dark');
                    root.classList.add('light');
                } else {
                    root.classList.remove('light');
                    root.classList.add('dark');
                }
            }, [theme]);


            const exportToCsv = (data, filename) => {
                const headers = Object.keys(data[0]);
                const csvRows = [
                    headers.join(','),
                    ...data.map(row => 
                        headers.map(header => JSON.stringify(row[header])).join(',')
                    )
                ];
                const csvString = csvRows.join('\n');
                const blob = new Blob([csvString], { type: 'text/csv' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.setAttribute('hidden', '');
                a.setAttribute('href', url);
                a.setAttribute('download', `${filename}.csv`);
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            };

            const handleExportRequest = (data, filename = 'longevity_master_table') => {
                setDataToExport(data);
                setExportFilename(filename);
                setIsModalOpen(true);
            };

            const handleModalConfirm = (email) => {
                console.log(`Email captured for lead gen: ${email}`);
                if (dataToExport) {
                    exportToCsv(dataToExport, exportFilename);
                }
                setIsModalOpen(false);
                setDataToExport(null);
            };

            const renderContent = () => {
                switch (activeTab) {
                    case t.tabs[0]: // Inicio
                        return <Hero t={t} onExplore={() => setActiveTab(t.tabs[1])} onOpenTable={() => setActiveTab(t.tabs[3])} />;
                    case t.tabs[1]: // Pilares
                        return <PillarsSection t={t} lang={lang} />;
                    case t.tabs[2]: // Estilo de Vida
                        return <LifestyleSection t={t} lang={lang} />;
                    case t.tabs[3]: // Tabla Maestra
                        return <MasterTableSection t={t} lang={lang} onExport={handleExportRequest} />;
                    case t.tabs[4]: // Protocolos
                        return <ProtocolsSection t={t} onExport={handleExportRequest} />;
                    case t.tabs[5]: // Dosis
                        return <DosesSection t={t}/>;
                    default:
                        return <Hero t={t} onExplore={() => setActiveTab(t.tabs[1])} onOpenTable={() => setActiveTab(t.tabs[3])} />;
                }
            };

            return (
                <div className="min-h-screen">
                    <Header activeTab={activeTab} setActiveTab={setActiveTab} t={t} lang={lang} setLang={setLang} theme={theme} setTheme={setTheme}/>
                    <main className="container mx-auto px-4 sm:px-6 lg:px-8">
                        {renderContent()}
                    </main>
                    <Footer t={t}/>
                    <EmailGateModal 
                        isOpen={isModalOpen} 
                        onClose={() => setIsModalOpen(false)}
                        onConfirm={handleModalConfirm}
                        t={t}
                    />
                </div>
            );
        };

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>

